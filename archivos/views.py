from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.views.generic import TemplateView, ListView, CreateView
from django.views import View
from django.http import HttpResponse, Http404, FileResponse
from django.urls import reverse_lazy
from django.db.models import Count, Q
from django.utils import timezone
from django.db import transaction
import mimetypes
import os
from django.core.files.base import ContentFile
import openpyxl
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.utils import get_column_letter
from pathlib import Path
from django.contrib import messages
from django.shortcuts import render, redirect
from django.db import transaction
from .models import Archivo, Fraccion, PerfilUsuario, HistorialAcceso
from .forms import ArchivoForm




class DashboardView(LoginRequiredMixin, TemplateView):
    """Vista principal del dashboard"""
    template_name = 'archivos/dashboard.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        
        # Obtener perfil del usuario
        try:
            perfil = self.request.user.perfilusuario
            tipo_usuario = perfil.tipo_usuario
        except PerfilUsuario.DoesNotExist:
            tipo_usuario = None
            messages.warning(self.request, 'Tu usuario no tiene un perfil asignado. Contacta al administrador.')
        
        # Filtrar fracciones seg√∫n el tipo de usuario
        if tipo_usuario:
            fracciones = Fraccion.objects.filter(
                tipo_usuario_asignado=tipo_usuario,
                activa=True
            )
        else:
            fracciones = Fraccion.objects.filter(activa=True)
        
        # Estad√≠sticas b√°sicas
        total_archivos = Archivo.objects.filter(
            fraccion__in=fracciones,
            vigente=True
        ).count()
        
        archivos_recientes = Archivo.objects.filter(
            fraccion__in=fracciones
        ).order_by('-created_at')[:5]
        
        context.update({
            'fracciones': fracciones,
            'total_archivos': total_archivos,
            'archivos_recientes': archivos_recientes,
            'tipo_usuario': tipo_usuario,
        })
        
        return context

class CargarArchivoView(LoginRequiredMixin, CreateView):
    """Vista para cargar archivos"""
    model = Archivo
    form_class = ArchivoForm
    template_name = 'archivos/cargar_archivo.html'
    success_url = reverse_lazy('archivos:dashboard')
    
    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['user'] = self.request.user
        return kwargs
    
    def form_valid(self, form):
        """
        Manejo mejorado de la subida de archivos con mejor debug y transacciones
        """
        # DEBUG: Imprimir datos recibidos
        print("=== DEBUG FORMULARIO ===")
        print(f"POST data: {self.request.POST}")
        print(f"FILES data: {self.request.FILES}")
        print(f"Form cleaned data: {form.cleaned_data}")
        print(f"Usuario: {self.request.user}")
        print("========================")
        
        # Verificar perfil de usuario
        try:
            perfil = self.request.user.perfilusuario
            print(f"Perfil usuario: {perfil.tipo_usuario}")
        except PerfilUsuario.DoesNotExist:
            messages.error(self.request, 'Tu usuario no tiene un perfil asignado. Contacta al administrador.')
            return self.form_invalid(form)
        
        # Verificar si hay archivo
        if 'archivo' not in form.cleaned_data or not form.cleaned_data['archivo']:
            print("‚ùå No se recibi√≥ archivo en form.cleaned_data")
            messages.error(self.request, 'No se recibi√≥ ning√∫n archivo.')
            return self.form_invalid(form)
        
        archivo_file = form.cleaned_data['archivo']
        print(f"‚úÖ Archivo recibido: {archivo_file.name}, Tama√±o: {archivo_file.size} bytes")
        
        # Validar tama√±o del archivo (100 MB)
        if archivo_file.size > 104857600:  # 100 MB en bytes
            print(f"‚ùå Archivo muy grande: {archivo_file.size} bytes")
            messages.error(self.request, 'El archivo no puede superar los 100 MB.')
            return self.form_invalid(form)
        
        # Verificar que la fracci√≥n corresponde al usuario
        fraccion = form.cleaned_data['fraccion']
        if fraccion.tipo_usuario_asignado != perfil.tipo_usuario:
            print(f"‚ùå Fracci√≥n no permitida para usuario: {fraccion.tipo_usuario_asignado} != {perfil.tipo_usuario}")
            messages.error(self.request, 'No tienes permisos para cargar archivos en esta fracci√≥n.')
            return self.form_invalid(form)
        
        # Usar transacci√≥n at√≥mica para evitar problemas de concurrencia
        try:
            with transaction.atomic():
                # Asignar datos al formulario
                form.instance.usuario = self.request.user
                
                # Calcular versi√≥n
                archivos_existentes = Archivo.objects.filter(
                    fraccion=form.instance.fraccion,
                    a√±o=form.instance.a√±o,
                    periodo_especifico=form.instance.periodo_especifico
                ).select_for_update()  # Lock para evitar race conditions
                
                if archivos_existentes.exists():
                    ultima_version = archivos_existentes.order_by('-version').first().version
                    form.instance.version = ultima_version + 1
                    print(f"üìù Nueva versi√≥n calculada: {form.instance.version}")
                    
                    # Marcar archivos anteriores como no vigentes
                    archivos_existentes.update(vigente=False)
                else:
                    form.instance.version = 1
                    print("üìù Primera versi√≥n del archivo")
                
                # Establecer como vigente
                form.instance.vigente = True
                
                # Guardar el archivo
                print("üíæ Intentando guardar archivo...")
                archivo_instance = form.save()
                
                print(f"‚úÖ Archivo guardado exitosamente con ID: {archivo_instance.id}")
                print(f"üìÅ Ruta del archivo: {archivo_instance.archivo.path}")
                
                # Verificar que el archivo se guard√≥ f√≠sicamente
                if os.path.exists(archivo_instance.archivo.path):
                    print(f"‚úÖ Archivo f√≠sico confirmado en: {archivo_instance.archivo.path}")
                else:
                    print(f"‚ùå Archivo f√≠sico NO encontrado en: {archivo_instance.archivo.path}")
                
                messages.success(
                    self.request, 
                    f'Archivo "{archivo_file.name}" cargado exitosamente como versi√≥n {archivo_instance.version}.'
                )
                
                return redirect(self.success_url)
                
        except Exception as e:
            print(f"‚ùå Error en transacci√≥n: {type(e).__name__}: {e}")
            import traceback
            print(f"Traceback completo:")
            traceback.print_exc()
            
            messages.error(self.request, f'Error al guardar el archivo: {e}')
            return self.form_invalid(form)
    
    def form_invalid(self, form):
        """Manejo mejorado de formularios inv√°lidos"""
        print("=== FORMULARIO INV√ÅLIDO ===")
        print(f"Errores del formulario: {form.errors}")
        print(f"Errores no de campo: {form.non_field_errors()}")
        print("===========================")
        
        # Agregar errores como mensajes
        for field, errors in form.errors.items():
            for error in errors:
                if field == '__all__':
                    messages.error(self.request, f"Error: {error}")
                else:
                    messages.error(self.request, f"Error en {field}: {error}")
        
        return super().form_invalid(form)

class ListadoArchivosView(LoginRequiredMixin, ListView):
    """Vista para listar archivos con exportaci√≥n a Excel"""
    model = Archivo
    template_name = 'archivos/listado_archivos.html'
    context_object_name = 'archivos'
    paginate_by = 20
    
    def get(self, request, *args, **kwargs):
        # ‚úÖ VERIFICAR SI ES UNA SOLICITUD DE EXPORTACI√ìN
        if request.GET.get('export') == 'excel':
            return self.exportar_excel(request)
        
        return super().get(request, *args, **kwargs)
    
    def get_queryset(self):
        # Obtener perfil del usuario
        try:
            perfil = self.request.user.perfilusuario
            tipo_usuario = perfil.tipo_usuario
        except PerfilUsuario.DoesNotExist:
            messages.warning(self.request, 'Tu usuario no tiene un perfil asignado.')
            return Archivo.objects.none()
        
        # Filtrar por tipo de usuario
        queryset = Archivo.objects.filter(
            fraccion__tipo_usuario_asignado=tipo_usuario
        ).select_related('fraccion', 'usuario').order_by('-created_at')
        
        # ‚úÖ FILTRO POR ESTADO (VIGENTE/HIST√ìRICO/TODOS)
        estado = self.request.GET.get('estado', 'vigente')  # Por defecto solo vigentes
        
        if estado == 'vigente':
            queryset = queryset.filter(vigente=True)
        elif estado == 'historico':
            queryset = queryset.filter(vigente=False)
        # Si estado == 'todos', no filtramos por vigente
        
        # Filtros adicionales
        fraccion_id = self.request.GET.get('fraccion')
        a√±o = self.request.GET.get('a√±o')
        
        if fraccion_id:
            queryset = queryset.filter(fraccion_id=fraccion_id)
        
        if a√±o:
            queryset = queryset.filter(a√±o=a√±o)
        
        # Funcionalidad de b√∫squeda
        busqueda = self.request.GET.get('busqueda')
        if busqueda:
            queryset = queryset.filter(
                Q(nombre_original__icontains=busqueda) |
                Q(fraccion__nombre__icontains=busqueda) |
                Q(fraccion__numero__icontains=busqueda)
            )
        
        return queryset
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        
        # Obtener fracciones para filtros
        try:
            perfil = self.request.user.perfilusuario
            tipo_usuario = perfil.tipo_usuario
            fracciones = Fraccion.objects.filter(
                tipo_usuario_asignado=tipo_usuario,
                activa=True
            )
        except PerfilUsuario.DoesNotExist:
            fracciones = Fraccion.objects.none()
        
        # A√±os disponibles
        a√±os = Archivo.objects.filter(
            fraccion__in=fracciones
        ).values_list('a√±o', flat=True).distinct().order_by('-a√±o')
        
        context.update({
            'fracciones': fracciones,
            'a√±os': a√±os,
            'fraccion_seleccionada': self.request.GET.get('fraccion'),
            'a√±o_seleccionado': self.request.GET.get('a√±o'),
            'estado_seleccionado': self.request.GET.get('estado', 'vigente'),
            'busqueda_actual': self.request.GET.get('busqueda', ''),
        })
        
        return context
    
    def exportar_excel(self, request):
        """
        ‚úÖ FUNCI√ìN OPTIMIZADA PARA EXPORTAR A EXCEL - AGRUPADA POR FRACCI√ìN
        """
        print("üìä Iniciando exportaci√≥n a Excel agrupada...")
        
        # Obtener queryset con los mismos filtros pero ORDENADO POR FRACCI√ìN
        queryset = self.get_queryset().order_by(
            'fraccion__numero',  # ‚úÖ PRIMERO por n√∫mero de fracci√≥n
            'a√±o',               # Luego por a√±o  
            'periodo_especifico', # Luego por periodo
            '-created_at'        # Finalmente por fecha (m√°s recientes primero)
        )
        
        # Obtener informaci√≥n del usuario
        try:
            perfil = request.user.perfilusuario
            tipo_usuario_display = perfil.get_tipo_usuario_display()
        except:
            tipo_usuario_display = "Usuario"
        
        # Crear workbook y worksheet
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "Archivos Art√≠culo 65"
        
        # ‚úÖ CONFIGURAR ESTILOS
        header_font = Font(bold=True, color="FFFFFF", size=12)
        header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        header_alignment = Alignment(horizontal="center", vertical="center")
        
        # Estilo para separadores de fracci√≥n
        fraccion_font = Font(bold=True, color="FFFFFF", size=11)
        fraccion_fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")
        
        border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
        
        # ‚úÖ ENCABEZADOS OPTIMIZADOS (SIN: Estado, Versi√≥n, Tama√±o, Usuario, Periodo)
        headers = [
            'N√∫mero',           # ‚úÖ PRIMERA COLUMNA
            'Fracci√≥n',         # ‚úÖ SEGUNDA COLUMNA  
            'A√±o',
            'Tipo Periodo',
            'Archivo',
            'Fecha Carga',
            'Enlace P√∫blico'
        ]
        
        # Escribir encabezados
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = header_alignment
            cell.border = border
        
        # ‚úÖ ESCRIBIR DATOS AGRUPADOS POR FRACCI√ìN
        row_num = 2
        current_fraccion = None
        
        for archivo in queryset:
            # ‚úÖ AGREGAR SEPARADOR CUANDO CAMBIA LA FRACCI√ìN
            if current_fraccion != archivo.fraccion.numero:
                if current_fraccion is not None:  # No agregar separador antes de la primera fracci√≥n
                    # Fila vac√≠a como separador
                    row_num += 1
                
                # Fila de t√≠tulo de fracci√≥n
                ws.merge_cells(f'A{row_num}:G{row_num}')
                title_cell = ws.cell(row=row_num, column=1, 
                                   value=f"FRACCI√ìN {archivo.fraccion.numero} - {archivo.fraccion.nombre}")
                title_cell.font = fraccion_font
                title_cell.fill = fraccion_fill
                title_cell.alignment = Alignment(horizontal="center", vertical="center")
                
                # Aplicar borde a todas las celdas de la fila fusionada
                for col in range(1, len(headers) + 1):
                    ws.cell(row=row_num, column=col).border = border
                
                row_num += 1
                current_fraccion = archivo.fraccion.numero
            
            # Generar enlace p√∫blico
            enlace_publico = f"{request.scheme}://{request.get_host()}/publico/archivo/{archivo.id}/"
            
            # ‚úÖ DATOS OPTIMIZADOS DE LA FILA (SIN campos eliminados)
            row_data = [
                archivo.fraccion.numero,                                    # N√∫mero (PRIMERA COLUMNA)
                archivo.fraccion.nombre,                                    # Fracci√≥n (SEGUNDA COLUMNA)
                archivo.a√±o,                                               # A√±o
                archivo.get_tipo_periodo_display(),                        # Tipo Periodo
                archivo.nombre_original,                                   # Archivo
                archivo.created_at.strftime("%d/%m/%Y %H:%M"),            # Fecha Carga
                enlace_publico                                             # Enlace P√∫blico
            ]
            
            # Escribir fila
            for col, value in enumerate(row_data, 1):
                cell = ws.cell(row=row_num, column=col, value=value)
                cell.border = border
                
                # ‚úÖ COLOREAR FILAS ALTERNADAS POR FRACCI√ìN
                if archivo.vigente:
                    # Verde claro para archivos vigentes
                    cell.fill = PatternFill(start_color="E8F5E8", end_color="E8F5E8", fill_type="solid")
                else:
                    # Gris claro para archivos hist√≥ricos
                    cell.fill = PatternFill(start_color="F5F5F5", end_color="F5F5F5", fill_type="solid")
            
            row_num += 1
        
        # ‚úÖ AJUSTAR ANCHO DE COLUMNAS OPTIMIZADO
        column_widths = [
            12,  # N√∫mero
            45,  # Fracci√≥n (m√°s ancho para nombres largos)
            10,  # A√±o
            15,  # Tipo Periodo
            40,  # Archivo
            18,  # Fecha Carga
            55   # Enlace P√∫blico (m√°s ancho)
        ]
        
        for col, width in enumerate(column_widths, 1):
            ws.column_dimensions[get_column_letter(col)].width = width
        
        # ‚úÖ AGREGAR INFORMACI√ìN DEL REPORTE (m√°s abajo para no interferir)
        info_row = row_num + 3
        
        # T√≠tulo de informaci√≥n
        ws.merge_cells(f'A{info_row}:C{info_row}')
        info_title = ws.cell(row=info_row, column=1, value="INFORMACI√ìN DEL REPORTE")
        info_title.font = Font(bold=True, size=11)
        info_title.fill = PatternFill(start_color="D9E1F2", end_color="D9E1F2", fill_type="solid")
        info_row += 1
        
        # Informaci√≥n del reporte
        info_data = [
            ("Reporte generado por:", f"{request.user.get_full_name() or request.user.username}"),
            ("Fecha de generaci√≥n:", timezone.now().strftime("%d/%m/%Y %H:%M")),
            ("Tipo de usuario:", tipo_usuario_display),
            ("Total de archivos:", queryset.count()),
        ]
        
        # ‚úÖ AGREGAR FILTROS APLICADOS
        filtros_info = []
        if request.GET.get('fraccion'):
            try:
                fraccion = Fraccion.objects.get(id=request.GET.get('fraccion'))
                filtros_info.append(f"Fracci√≥n: {fraccion.numero} - {fraccion.nombre}")
            except:
                pass
        
        if request.GET.get('a√±o'):
            filtros_info.append(f"A√±o: {request.GET.get('a√±o')}")
        
        if request.GET.get('estado'):
            estado = request.GET.get('estado')
            filtros_info.append(f"Estado: {estado.capitalize()}")
        
        if request.GET.get('busqueda'):
            filtros_info.append(f"B√∫squeda: {request.GET.get('busqueda')}")
        
        if filtros_info:
            info_data.append(("Filtros aplicados:", " | ".join(filtros_info)))
        
        # Escribir informaci√≥n
        for label, value in info_data:
            ws.cell(row=info_row, column=1, value=label).font = Font(bold=True)
            ws.cell(row=info_row, column=2, value=str(value))
            info_row += 1
        
        # ‚úÖ AGREGAR ESTAD√çSTICAS DE FRACCIONES
        if queryset.count() > 0:
            # Contar archivos por fracci√≥n
            from django.db.models import Count
            stats_fraccion = queryset.values('fraccion__numero', 'fraccion__nombre').annotate(
                total=Count('id')
            ).order_by('fraccion__numero')
            
            if len(stats_fraccion) > 1:  # Solo mostrar si hay m√∫ltiples fracciones
                info_row += 1
                ws.cell(row=info_row, column=1, value="ARCHIVOS POR FRACCI√ìN:").font = Font(bold=True)
                info_row += 1
                
                for stat in stats_fraccion:
                    ws.cell(row=info_row, column=1, value=f"Fracci√≥n {stat['fraccion__numero']}:")
                    ws.cell(row=info_row, column=2, value=f"{stat['total']} archivo(s)")
                    info_row += 1
        
        # ‚úÖ PREPARAR RESPUESTA HTTP
        response = HttpResponse(
            content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
        
        # Generar nombre de archivo din√°mico
        fecha_actual = timezone.now().strftime("%Y%m%d_%H%M")
        filtro_str = ""
        
        if request.GET.get('a√±o'):
            filtro_str += f"_{request.GET.get('a√±o')}"
        if request.GET.get('fraccion'):
            try:
                fraccion = Fraccion.objects.get(id=request.GET.get('fraccion'))
                filtro_str += f"_Frac{fraccion.numero}"
            except:
                pass
        elif queryset.count() > 0:
            # Si es de todas las fracciones, indicarlo
            filtro_str += "_TodasFracciones"
        
        filename = f"Archivos_Articulo65{filtro_str}_{fecha_actual}.xlsx"
        response['Content-Disposition'] = f'attachment; filename="{filename}"'
        
        # Guardar workbook en response
        wb.save(response)
        
        print(f"‚úÖ Excel agrupado generado: {filename}")
        print(f"üìä Registros exportados: {queryset.count()}")
        print(f"üìÅ Fracciones incluidas: {len(set(a.fraccion.numero for a in queryset))}")
        
        return response
    
    




class HistorialView(LoginRequiredMixin, ListView):
    """Vista para mostrar historial de una fracci√≥n"""
    model = Archivo
    template_name = 'archivos/historial.html'
    context_object_name = 'archivos'
    
    def get_queryset(self):
        fraccion_id = self.kwargs['fraccion_id']
        
        # Verificar permisos
        try:
            perfil = self.request.user.perfilusuario
            fraccion = get_object_or_404(Fraccion, id=fraccion_id)
            
            if fraccion.tipo_usuario_asignado != perfil.tipo_usuario:
                messages.error(self.request, 'No tienes permisos para ver el historial de esta fracci√≥n.')
                return Archivo.objects.none()
                
        except PerfilUsuario.DoesNotExist:
            messages.error(self.request, 'Tu usuario no tiene un perfil asignado.')
            return Archivo.objects.none()
        
        return Archivo.objects.filter(
            fraccion_id=fraccion_id
        ).order_by('-created_at')
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        fraccion_id = self.kwargs['fraccion_id']
        context['fraccion'] = get_object_or_404(Fraccion, id=fraccion_id)
        return context

class DescargarArchivoView(LoginRequiredMixin, View):
    """Vista para descargar archivos con URL p√∫blica"""
    
    def get(self, request, archivo_id):
        archivo = get_object_or_404(Archivo, id=archivo_id)
        
        # Verificar permisos
        try:
            perfil = request.user.perfilusuario
            if archivo.fraccion.tipo_usuario_asignado != perfil.tipo_usuario:
                raise Http404("No tienes permisos para acceder a este archivo")
        except PerfilUsuario.DoesNotExist:
            raise Http404("Tu usuario no tiene un perfil asignado")
        
        # Registrar acceso
        try:
            HistorialAcceso.objects.create(
                archivo=archivo,
                usuario=request.user,
                ip_address=self.get_client_ip(request)
            )
        except Exception as e:
            print(f"Error al registrar acceso: {e}")
        
        # Servir archivo
        try:
            if archivo.archivo and os.path.exists(archivo.archivo.path):
                response = FileResponse(
                    open(archivo.archivo.path, 'rb'),
                    as_attachment=True,
                    filename=archivo.nombre_original
                )
                return response
            else:
                raise Http404("Archivo f√≠sico no encontrado")
        except Exception as e:
            print(f"Error al servir archivo: {e}")
            raise Http404("Error al acceder al archivo")
    
    def get_client_ip(self, request):
        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if x_forwarded_for:
            ip = x_forwarded_for.split(',')[0]
        else:
            ip = request.META.get('REMOTE_ADDR')
        return ip

class VerArchivoView(LoginRequiredMixin, View):
    """Vista para visualizar archivos en el navegador"""
    
    def get(self, request, archivo_id):
        archivo = get_object_or_404(Archivo, id=archivo_id)
        
        # Verificar permisos (mismo c√≥digo que DescargarArchivoView)
        try:
            perfil = request.user.perfilusuario
            if archivo.fraccion.tipo_usuario_asignado != perfil.tipo_usuario:
                raise Http404("No tienes permisos para acceder a este archivo")
        except PerfilUsuario.DoesNotExist:
            raise Http404("Tu usuario no tiene un perfil asignado")
        
        # Registrar acceso
        try:
            HistorialAcceso.objects.create(
                archivo=archivo,
                usuario=request.user,
                ip_address=self.get_client_ip(request)
            )
        except Exception as e:
            print(f"Error al registrar acceso: {e}")
        
        # Servir archivo para visualizaci√≥n
        try:
            if archivo.archivo and os.path.exists(archivo.archivo.path):
                content_type, _ = mimetypes.guess_type(archivo.archivo.path)
                response = FileResponse(
                    open(archivo.archivo.path, 'rb'),
                    content_type=content_type
                )
                return response
            else:
                raise Http404("Archivo f√≠sico no encontrado")
        except Exception as e:
            print(f"Error al servir archivo: {e}")
            raise Http404("Error al acceder al archivo")
    
    def get_client_ip(self, request):
        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if x_forwarded_for:
            ip = x_forwarded_for.split(',')[0]
        else:
            ip = request.META.get('REMOTE_ADDR')
        return ip

class EstadisticasView(LoginRequiredMixin, TemplateView):
    """Vista para mostrar estad√≠sticas"""
    template_name = 'archivos/estadisticas.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        
        # Obtener tipo de usuario
        try:
            perfil = self.request.user.perfilusuario
            tipo_usuario = perfil.tipo_usuario
        except PerfilUsuario.DoesNotExist:
            tipo_usuario = None
            messages.warning(self.request, 'Tu usuario no tiene un perfil asignado.')
        
        if tipo_usuario:
            # Estad√≠sticas por fracci√≥n
            stats_fraccion = Archivo.objects.filter(
                fraccion__tipo_usuario_asignado=tipo_usuario,
                vigente=True
            ).values(
                'fraccion__numero', 'fraccion__nombre'
            ).annotate(
                total=Count('id')
            ).order_by('fraccion__numero')
            
            # Estad√≠sticas por a√±o
            stats_a√±o = Archivo.objects.filter(
                fraccion__tipo_usuario_asignado=tipo_usuario
            ).values('a√±o').annotate(
                total=Count('id')
            ).order_by('a√±o')
            
            context.update({
                'stats_fraccion': stats_fraccion,
                'stats_a√±o': stats_a√±o,
                'tipo_usuario': tipo_usuario,
            })
        
        return context


        # ‚úÖ AGREGAR ESTAS VISTAS AL FINAL DE TU ARCHIVO archivos/views.py

# ‚úÖ REEMPLAZAR TODO EL FINAL DE TU views.py DESDE DONDE APARECE "class VerArchivoPublicoView"

class VerArchivoPublicoView(View):
    """Vista P√öBLICA para visualizar archivos sin autenticaci√≥n"""
    
    def get(self, request, archivo_id):
        archivo = get_object_or_404(Archivo, id=archivo_id)
        
        print(f"üìñ Acceso p√∫blico a archivo: {archivo.nombre_original}")
        print(f"üë§ IP: {self.get_client_ip(request)}")
        print(f"üåê User Agent: {request.META.get('HTTP_USER_AGENT', 'No disponible')}")
        
        # Registrar acceso p√∫blico (usuario an√≥nimo)
        try:
            HistorialAcceso.objects.create(
                archivo=archivo,
                usuario=None,  # Usuario an√≥nimo
                ip_address=self.get_client_ip(request)
            )
        except Exception as e:
            print(f"‚ö†Ô∏è Error registrando acceso p√∫blico: {e}")
        
        # Servir archivo para visualizaci√≥n
        try:
            if archivo.archivo and os.path.exists(archivo.archivo.path):
                content_type, _ = mimetypes.guess_type(archivo.archivo.path)
                
                print(f"‚úÖ Sirviendo archivo: {archivo.archivo.path}")
                print(f"üìÑ Content-Type: {content_type}")
                
                response = FileResponse(
                    open(archivo.archivo.path, 'rb'),
                    content_type=content_type,
                    filename=archivo.nombre_original
                )
                
                # Headers adicionales para mejor experiencia
                response['Content-Disposition'] = f'inline; filename="{archivo.nombre_original}"'
                response['X-Frame-Options'] = 'SAMEORIGIN'  # Permitir embed en iframes del mismo origen
                
                return response
            else:
                print(f"‚ùå Archivo f√≠sico no encontrado: {archivo.archivo.path if archivo.archivo else 'Sin archivo'}")
                raise Http404("Archivo no encontrado")
                
        except Exception as e:
            print(f"‚ùå Error sirviendo archivo p√∫blico: {e}")
            raise Http404("Error al acceder al archivo")
    
    def get_client_ip(self, request):
        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if x_forwarded_for:
            ip = x_forwarded_for.split(',')[0]
        else:
            ip = request.META.get('REMOTE_ADDR')
        return ip

class DescargarArchivoPublicoView(View):
    """Vista P√öBLICA para descargar archivos sin autenticaci√≥n"""
    
    def get(self, request, archivo_id):
        archivo = get_object_or_404(Archivo, id=archivo_id)
        
        print(f"‚¨áÔ∏è Descarga p√∫blica de archivo: {archivo.nombre_original}")
        print(f"üë§ IP: {self.get_client_ip(request)}")
        
        # Registrar acceso p√∫blico
        try:
            HistorialAcceso.objects.create(
                archivo=archivo,
                usuario=None,  # Usuario an√≥nimo
                ip_address=self.get_client_ip(request)
            )
        except Exception as e:
            print(f"‚ö†Ô∏è Error registrando descarga p√∫blica: {e}")
        
        # Servir archivo para descarga
        try:
            if archivo.archivo and os.path.exists(archivo.archivo.path):
                print(f"‚úÖ Descargando archivo: {archivo.archivo.path}")
                
                response = FileResponse(
                    open(archivo.archivo.path, 'rb'),
                    as_attachment=True,
                    filename=archivo.nombre_original
                )
                
                # Headers adicionales
                response['Content-Length'] = archivo.tama√±o
                response['X-Sendfile'] = archivo.archivo.path  # Para servidores optimizados
                
                return response
            else:
                print(f"‚ùå Archivo f√≠sico no encontrado para descarga: {archivo.archivo.path if archivo.archivo else 'Sin archivo'}")
                raise Http404("Archivo no encontrado")
                
        except Exception as e:
            print(f"‚ùå Error en descarga p√∫blica: {e}")
            raise Http404("Error al descargar el archivo")
    
    def get_client_ip(self, request):
        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if x_forwarded_for:
            ip = x_forwarded_for.split(',')[0]
        else:
            ip = request.META.get('REMOTE_ADDR')
        return ip

